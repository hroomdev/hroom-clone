import { fn } from '@storybook/test'

import {
  Experimental_CssVarsProvider as CssVarsProvider,
  experimental_extendTheme as extendTheme
} from '@mui/material/styles'

import DashboardCard from './DashboardCard'

const themeext = extendTheme({
  colorSchemes: { light: true, dark: true },
  cssVarPrefix: 'mui'
})

//themeext.vars.palette.primary.main = 'red'
// More on how to set up stories at: https://storybook.js.org/docs/writing-stories#default-export
export default {
  title: 'Dashboard/Card',
  component: DashboardCard,
  decorators: [
    // üëá Defining the decorator in the preview file applies it to all stories
    (Story, { parameters }) => {
      // üëá Make it configurable by reading the theme value from parameters
      return (
        <CssVarsProvider theme={themeext}>
          <Story />
        </CssVarsProvider>
      )
    }
  ],
  parameters: {
    // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/configure/story-layout
    layout: 'centered'
  },

  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs
  tags: ['autodocs'],

  // More on argTypes: https://storybook.js.org/docs/api/argtypes
  argTypes: {
    borderColor: { control: 'select', options: ['primary', 'secondary', 'error', 'info', 'success', 'warning'] },
    chipBackgroundColor: {
      control: 'select',
      options: [
        'action-selected',
        'divider',
        'primary-main',
        'background-default',
        'action-disabled',
        'action-hover',
        'info-main',
        'info-mainChannel',
        'rose-main'
      ]
    }
  }

  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args
  //args: { onClick: fn() }
}

// More on writing stories with args: https://storybook.js.org/docs/writing-stories/args
export const AdviceStats = {
  args: {
    title: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ä–µ–∑—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞, —á—Ç–æ–±—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–ª–∞–±—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≥–ª—É–±–∂–µ. ',
    avatarIcon: 'ri-car-line',
    ritoric: '–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ',
    chipLabel: '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
    chipBackgroundColor: 'action-selected'
  }
}

export const InsightStats = {
  args: {
    title:
      '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã—Å–æ–∫–æ –æ—Ü–µ–Ω–∏–≤–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞, –Ω–æ –≤—ã—Ä–∞–∂–∞—é—Ç –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ —á–µ—Ç–∫–æ—Å—Ç–∏ —Ü–µ–ª–µ–π. ',
    avatarIcon: 'ri-error-warning-line',
    ritoric: '–≤—Å–µ –∫–æ–º–∞–Ω–¥—ã',
    chipLabel: '–∫—Ä–∏—Ç–∏—á–Ω–æ',
    chipBackgroundColor: 'rose-main'
  }
}

export const TeamActionStats = {
  args: {
    title: '–£–ª—É—á—à–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ ',
    avatarIcon: 'ri-error-warning-line',
    ritoric: '–ü—Ä–æ–¥–∞–∂–∏',
    chipLabel: '–∫—Ä–∏—Ç–∏—á–Ω–æ',
    chipBackgroundColor: 'rose-main'
  }
}
